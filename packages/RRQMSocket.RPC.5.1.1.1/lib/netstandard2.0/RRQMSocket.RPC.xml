<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RRQMSocket.RPC</name>
    </assembly>
    <members>
        <member name="T:RRQMSocket.RPC.RRQMReceivedProcotolEventHandler">
            <summary>
            收到字节数据
            </summary>
            <param name="sender"></param>
            <param name="procotol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RPCAttribute">
            <summary>
            RPC方法属性基类
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.InvokeStatus">
            <summary>
            调用状态
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.Ready">
            <summary>
            就绪
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.UnFound">
            <summary>
            未找到服务
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.UnEnable">
            <summary>
            不可用
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.Success">
            <summary>
            成功调用
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.Abort">
            <summary>
            终止执行
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.InvocationException">
            <summary>
            调用内部异常
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.Exception">
            <summary>
            其他异常
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.MethodInstance">
            <summary>
            RPC函数实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.Provider">
            <summary>
            执行此RPC的实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.Method">
            <summary>
            RPC函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.RPCAttributes">
            <summary>
            RPC属性集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.MethodToken">
            <summary>
            方法唯一令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.ReturnType">
            <summary>
            返回值类型，无返回值时为Null
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.ParameterTypes">
            <summary>
            参数类型集合，已处理out及ref，无参数时为空集合，
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.Parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.ParameterNames">
            <summary>
            参数名集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.Async">
            <summary>
            是否异步执行
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.IsByRef">
            <summary>
            是否有引用类型
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.IsEnable">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.MethodInvoker">
            <summary>
            函数调用信使
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInvoker.ReturnParameter">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInvoker.Parameters">
            <summary>
            参数值集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInvoker.Status">
            <summary>
            获取调用状态
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInvoker.StatusMessage">
            <summary>
            状态消息
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInvoker.Flag">
            <summary>
            可以传递其他类型的数据容器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInvoker.Caller">
            <summary>
            此函数执行者
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.MethodMap">
            <summary>
            函数映射图
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.MethodMap.TryGet(System.Int32,RRQMSocket.RPC.MethodInstance@)">
            <summary>
            通过methodToken获取函数实例
            </summary>
            <param name="methodToken"></param>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.ReadOnlyDictionary`2">
            <summary>
            只读字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:RRQMSocket.RPC.ReadOnlyDictionary`2.Values">
            <summary>
            值集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ReadOnlyDictionary`2.Keys">
            <summary>
            键集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ReadOnlyDictionary`2.Count">
            <summary>
            键值对数目
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            返回迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.ReadOnlyList`1">
            <summary>
            只读
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMSocket.RPC.ReadOnlyList`1.GetEnumerator">
            <summary>
            返回迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="P:RRQMSocket.RPC.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            获取对象
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RPCParserCollection">
            <summary>
            RPCParser集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RPCParserCollection.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RPCParserCollection.Item(System.String)">
            <summary>
            获取IRPCParser
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RPCParserCollection.TryGetRPCParser(System.String,RRQMSocket.RPC.IRPCParser@)">
            <summary>
            获取IRPCParser
            </summary>
            <param name="key"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RPCParserCollection.System#Collections#Generic#IEnumerable{RRQMSocket#RPC#IRPCParser}#GetEnumerator">
            <summary>
            返回枚举对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.ServerProvider">
            <summary>
            RPC范围类
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ServerProvider.RPCService">
            <summary>
            该服务所属的服务器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.ServerProvider.RPCEnter(RRQMSocket.RPC.IRPCParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            RPC即将进入,
            若是想放弃本次执行，请抛出<see cref="T:RRQMSocket.RPC.RRQMAbandonRPCException"/>
            </summary>
            <param name="parser"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.ServerProvider.RPCError(RRQMSocket.RPC.IRPCParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            执行RPC发生错误
            </summary>
            <param name="parser"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.ServerProvider.RPCLeave(RRQMSocket.RPC.IRPCParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            RPC方法执行完成
            </summary>
            <param name="parser"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="T:RRQMSocket.RPC.ServerProviderCollection">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ServerProviderCollection.Count">
            <summary>
            服务数量
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ServerProviderCollection.SingleAssembly">
            <summary>
            唯一程序集
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.ServerProviderCollection.System#Collections#Generic#IEnumerable{RRQMSocket#RPC#ServerProvider}#GetEnumerator">
            <summary>
            返回枚举
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMAbandonRPCException">
            <summary>
            放弃RPC执行
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMAbandonRPCException.#ctor(System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="feedback">是否反馈信息</param>
            <param name="message">信息</param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMAbandonRPCException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMAbandonRPCException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMAbandonRPCException.Feedback">
            <summary>
            是否反馈信息
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPCException">
            <summary>
            RPC异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPCException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPCException.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPCException.#ctor(System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPCInvokeException">
            <summary>
            RPC调用异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPCInvokeException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPCInvokeException.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPCInvokeException.#ctor(System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPCInvokeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RPC.IRPCParser">
            <summary>
            RPC解析器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.IRPCParser.MethodMap">
            <summary>
            获取函数映射图
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.IRPCParser.RPCService">
            <summary>
            包含此解析器的服务器实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.IRPCParser.RRQMExecuteMethod">
            <summary>
            执行函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.IRPCParser.RRQMInitializeServers(RRQMSocket.RPC.ServerProviderCollection,RRQMSocket.RPC.MethodInstance[])">
            <summary>
            初始化服务
            </summary>
            <param name="providers"></param>
            <param name="methodInstances"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IRPCParser.RRQMEndInvokeMethod(RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            结束调用
            </summary>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IRPCParser.SetMethodMap(RRQMSocket.RPC.MethodMap)">
            <summary>
            设置函数映射
            </summary>
            <param name="methodMap"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IRPCParser.SetRPCService(RRQMSocket.RPC.RPCService)">
            <summary>
            设置服务
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IRPCParser.SetExecuteMethod(System.Action{RRQMSocket.RPC.IRPCParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance})">
            <summary>
            设置执行函数
            </summary>
            <param name="executeMethod"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RPCService">
            <summary>
            RPC服务器类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RPCService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RPCService.MethodInstances">
            <summary>
            获取函数实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RPCService.MethodMap">
            <summary>
            获取函数映射图实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RPCService.RPCParsers">
            <summary>
            获取RPC解析器集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RPCService.ServerProviders">
            <summary>
            获取服务实例
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RPCService.AddRPCParser(System.String,RRQMSocket.RPC.IRPCParser)">
            <summary>
            添加RPC解析器
            </summary>
            <param name="key"></param>
            <param name="parser"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RPCService.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RPCService.OpenServer">
            <summary>
            开启RPC服务
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RPCService.TryGetRPCParser(System.String,RRQMSocket.RPC.IRPCParser@)">
            <summary>
            获取解析器
            </summary>
            <param name="parserKey"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RPCService.RegistAllServer">
            <summary>
            注册所有服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RPCService.RegistServer(RRQMSocket.RPC.ServerProvider)">
            <summary>
            注册服务
            </summary>
            <param name="serverProvider"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RPCService.RegistServer``1">
            <summary>
            注册服务
            </summary>
            <typeparam name="T"></typeparam>
            <returns>返回T实例</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RPCService.SetMethodEnable(System.Int32,System.Boolean)">
            <summary>
            设置服务方法可用性
            </summary>
            <param name="methodToken">方法名</param>
            <param name="enable">可用性</param>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCException"></exception>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RRQMRPCAttribute">
            <summary>
            RPC方法标记属性类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="memberKey">指定键</param>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RRQMRPCAttribute.MemberKey">
            <summary>
            注册键
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RRQMRPCCallBackMethodAttribute">
            <summary>
            RPC方法标记属性类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCCallBackMethodAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="methodToken">指定函数键</param>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RRQMRPCCallBackMethodAttribute.MethodToken">
            <summary>
            注册键
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.TcpRPCClient">
            <summary>
            TcpRPCClient
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.Received">
            <summary>
            收到协议数据
            </summary>
        </member>
        <member name="E:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.RPCInitialized">
            <summary>
            RPC初始化后
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.MethodMap">
            <summary>
            获取反向RPC映射图
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.SerializeConverter">
            <summary>
            序列化生成器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.ServerProviders">
            <summary>
            获取反向RPC服务实例
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.Connect">
            <summary>
            连接
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.GetProxyInfo">
            <summary>
            获取远程服务器RPC服务文件
            </summary>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCException"></exception>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.InitializeRPC">
            <summary>
            初始化RPC
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.OnRPCInitialized(RRQMSocket.MesEventArgs)">
            <summary>
            RPC完成初始化后
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.Invoke``1(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[]@,System.Type[])">
            <summary>
            RPC调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.Invoke(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[]@,System.Type[])">
            <summary>
            RPC调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.Invoke(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            RPC调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.Invoke``1(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            RPC调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.Invoke(System.String,System.Int32,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            RPC调用
            </summary>
            <param name="id">客户端ID</param>
            <param name="methodToken">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.Invoke``1(System.String,System.Int32,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            RPC调用
            </summary>
            <param name="id">客户端ID</param>
            <param name="methodToken">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.OpenCallBackServer">
            <summary>
            开启反向RPC服务
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.RegistServer(RRQMSocket.RPC.ServerProvider)">
            <summary>
            注册服务
            </summary>
            <param name="serverProvider"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.HandleProtocolData(System.Nullable{System.Int16},RRQMCore.ByteManager.ByteBlock)">
            <summary>
            协议数据
            </summary>
            <param name="procotol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.LoadConfig(RRQMSocket.TcpClientConfig)">
            <summary>
            加载配置
            </summary>
            <param name="clientConfig"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.RPCHandleDefaultData(System.Nullable{System.Int16},RRQMCore.ByteManager.ByteBlock)">
            <summary>
            RPC处理其余协议
            </summary>
            <param name="procotol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRPCClient.OnHandleDefaultData(System.Nullable{System.Int16},RRQMCore.ByteManager.ByteBlock)">
            <summary>
            处理其余协议的事件触发
            </summary>
            <param name="procotol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.UdpRPCClient">
            <summary>
            UDP协议客户端
            </summary>
        </member>
        <member name="E:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.RPCInitialized">
            <summary>
            RPC初始化后
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.ID">
            <summary>
            返回ID
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.SerializeConverter">
            <summary>
            序列化生成器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.GetProxyInfo">
            <summary>
            获取远程服务器RPC服务文件
            </summary>
            <returns></returns>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCException"></exception>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.InitializeRPC">
            <summary>
            初始化RPC
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.Invoke``1(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[]@,System.Type[])">
            <summary>
            RPC调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.Invoke(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[]@,System.Type[])">
            <summary>
            RPC调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.Invoke(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            RPC调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.Invoke``1(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            RPC调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.Invoke(System.String,System.Int32,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            RPC调用
            </summary>
            <param name="id">客户端ID</param>
            <param name="methodToken">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.Invoke``1(System.String,System.Int32,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            RPC调用
            </summary>
            <param name="id">客户端ID</param>
            <param name="methodToken">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.HandleReceivedData(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            密封数据
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCClient.OnRPCInitialized(RRQMSocket.MesEventArgs)">
            <summary>
            RPC完成初始化后
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.CellCode">
            <summary>
            生成的单元代码
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.CellCode.Name">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.CellCode.Code">
            <summary>
            代码本体
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.CellCode.CodeType">
            <summary>
            代码类型
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.CodeType">
            <summary>
            代码类型
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.CodeType.ClassArgs">
            <summary>
            类代码
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.CodeType.Service">
            <summary>
            服务代码
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.FeedbackType">
            <summary>
            反馈类型
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.FeedbackType.OnlySend">
            <summary>
            仅发送
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.FeedbackType.WaitSend">
            <summary>
            等待，直到发送抵达
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.FeedbackType.WaitInvoke">
            <summary>
            等待，直到调用完成
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.InvokeOption">
            <summary>
            RPC调用设置
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.InvokeOption.OnlySend">
            <summary>
            默认设置。
            WaitTime=5
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.InvokeOption.WaitSend">
            <summary>
            默认设置。
            WaitTime=5
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.InvokeOption.WaitInvoke">
            <summary>
            默认设置。
            WaitTime=5
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.InvokeOption.WaitTime">
            <summary>
            调用等待时长
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.InvokeOption.FeedbackType">
            <summary>
            调用反馈
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.IRPCCompiler">
            <summary>
            RPC编译器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRPCCompiler.CompileCode(System.String,System.String[],System.Collections.Generic.List{System.String})">
            <summary>
            编译代码
            </summary>
            <param name="assemblyName"></param>
            <param name="codes"></param>
            <param name="refStrings"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.MethodItem">
            <summary>
            方法体
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.MethodItem.MethodToken">
            <summary>
            方法唯一标识
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.MethodItem.Method">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.MethodItem.IsOutOrRef">
            <summary>
            是否含有Out或Ref
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.MethodStore">
            <summary>
            函数仓库
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.MethodStore.AddMethodItem(RRQMSocket.RPC.RRQMRPC.MethodItem)">
            <summary>
            添加
            </summary>
            <param name="methodItem"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.MethodStore.GetAllMethodItem">
            <summary>
            获取所有
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.MethodStore.TryGetMethodItem(System.String,RRQMSocket.RPC.RRQMRPC.MethodItem@)">
            <summary>
            获取函数服务
            </summary>
            <param name="method"></param>
            <param name="methodItem"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.PropertyCodeMap">
            <summary>
            代码辅助类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.PropertyCodeMap.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.PropertyCodeMap.Assembly">
            <summary>
            所属程序集
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.PropertyCodeMap.GetPropertyCode">
            <summary>
            获取属性代码
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.PropertyCodeMap.GetTypeFullName(System.Type)">
            <summary>
            获取类型全名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RpcCallBackContext">
            <summary>
            回调函数载体
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RPCContext">
            <summary>
            RPC传输类
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RPCProxyInfo">
            <summary>
            RPC代理文件程序
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RPCProxyInfo.AssemblyName">
            <summary>
            程序名
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RPCProxyInfo.AssemblyData">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RPCProxyInfo.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RPCProxyInfo.Codes">
            <summary>
            源代码
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.TcpRPCClientConfig">
            <summary>
            TcpRPCClient配置
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRPCClientConfig.ProxyToken">
            <summary>
            代理文件令箭
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.TcpRPCClientConfig.ProxyTokenProperty">
            <summary>
            代理文件令箭, 所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRPCClientConfig.SerializeConverter">
            <summary>
            序列化转换器
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.TcpRPCClientConfig.SerializeConverterProperty">
            <summary>
            序列化转换器, 所需类型<see cref="T:RRQMSocket.RPC.RRQMRPC.SerializeConverter"/>
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig">
            <summary>
            RRQMRPC解析器配置
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig.SerializeConverter">
            <summary>
            序列化转换器
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig.SerializeConverterProperty">
            <summary>
            序列化转换器, 所需类型<see cref="T:RRQMSocket.RPC.RRQMRPC.SerializeConverter"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig.NameSpace">
            <summary>
            代理源文件命名空间
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig.NameSpaceProperty">
            <summary>
            代理源文件命名空间, 所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig.RPCVersion">
            <summary>
            RPC代理版本
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig.RPCVersionProperty">
            <summary>
            RPC代理版本, 所需类型<see cref="T:System.Version"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig.RPCCompiler">
            <summary>
            RPC编译器
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig.RPCCompilerProperty">
            <summary>
            RPC编译器, 所需类型<see cref="T:RRQMSocket.RPC.RRQMRPC.IRPCCompiler"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig.ProxyToken">
            <summary>
            代理令箭，当客户端获取代理文件时需验证令箭
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.TcpRPCParserConfig.ProxyTokenProperty">
            <summary>
            代理令箭，当客户端获取代理文件时需验证令箭, 所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.UdpRPCClientConfig">
            <summary>
            UdpRpc
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRPCClientConfig.ProxyToken">
            <summary>
            代理文件令箭
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.UdpRPCClientConfig.ProxyTokenProperty">
            <summary>
            代理文件令箭, 所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRPCClientConfig.SerializeConverter">
            <summary>
            序列化转换器
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.UdpRPCClientConfig.SerializeConverterProperty">
            <summary>
            序列化转换器, 所需类型<see cref="T:RRQMSocket.RPC.RRQMRPC.SerializeConverter"/>
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig">
            <summary>
            UdpRPCParser
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig.SerializeConverter">
            <summary>
            序列化转换器
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig.SerializeConverterProperty">
            <summary>
            序列化转换器, 所需类型<see cref="T:RRQMSocket.RPC.RRQMRPC.SerializeConverter"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig.NameSpace">
            <summary>
            代理源文件命名空间
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig.NameSpaceProperty">
            <summary>
            代理源文件命名空间, 所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig.RPCVersion">
            <summary>
            RPC代理版本
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig.RPCVersionProperty">
            <summary>
            RPC代理版本, 所需类型<see cref="T:System.Version"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig.RPCCompiler">
            <summary>
            RPC编译器
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig.RPCCompilerProperty">
            <summary>
            RPC编译器, 所需类型<see cref="T:RRQMSocket.RPC.RRQMRPC.IRPCCompiler"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig.ProxyToken">
            <summary>
            代理令箭，当客户端获取代理文件时需验证令箭
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.UdpRPCParserConfig.ProxyTokenProperty">
            <summary>
            代理令箭，当客户端获取代理文件时需验证令箭, 所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RRQMRPCKeyException">
            <summary>
            RPC添加方法键异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCKeyException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCKeyException.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCKeyException.#ctor(System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RRQMRPCNoFreeException">
            <summary>
            无可用RPC异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCNoFreeException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCNoFreeException.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCNoFreeException.#ctor(System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCNoFreeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException">
            <summary>
            序列化异常类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException.#ctor(System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.IRPCClient">
            <summary>
            客户端RPC接口
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRPCClient.Invoke(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">函数名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">RPC调用设置</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRPCClient.Invoke``1(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">RPC调用设置</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRPCClient.Invoke``1(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[]@,System.Type[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <param name="invokeOption">RPC调用设置</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRPCClient.Invoke(System.String,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[]@,System.Type[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <param name="invokeOption">RPC调用设置</param>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RRQMSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCInvokeException"></exception>
            <exception cref="T:RRQMCore.Exceptions.RRQMException"></exception>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient">
            <summary>
            客户端RPC接口
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.ID">
            <summary>
            获取ID
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.BytePool">
            <summary>
            获取内存池实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.SerializeConverter">
            <summary>
            序列化生成器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.GetProxyInfo">
            <summary>
            获取远程服务器RPC服务文件
            </summary>
            <returns></returns>
            <exception cref="T:RRQMSocket.RPC.RRQMRPCException"></exception>
            <exception cref="T:RRQMSocket.RRQMTimeoutException"></exception>
        </member>
        <member name="E:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.RPCInitialized">
            <summary>
            RPC初始化后
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.InitializeRPC">
            <summary>
            初始化RPC
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser">
            <summary>
            RRQMRPC接口
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.BytePool">
            <summary>
            内存池实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.Codes">
            <summary>
            获取生成的代理代码
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.NameSpace">
            <summary>
            代理源文件命名空间
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.ProxyInfo">
            <summary>
            获取代理文件实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.MethodStore">
            <summary>
            函数库
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.ProxyToken">
            <summary>
            代理令箭，当客户端获取代理文件时需验证令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.RPCCompiler">
            <summary>
            RPC编译器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.RPCVersion">
            <summary>
            RPC代理版本
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.SerializeConverter">
            <summary>
            序列化转换器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.GetProxyInfo(System.String,System.Object)">
            <summary>
            获取代理文件
            </summary>
            <param name="proxyToken">代理令箭</param>
            <param name="caller">调用作用者，TCP模式下派生自<see cref="T:RRQMSocket.RPC.RRQMRPC.RPCSocketClient"/>,UDP模式下是<see cref="T:System.Net.EndPoint"/></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.ExecuteContext(RRQMSocket.RPC.RRQMRPC.RPCContext,System.Object)">
            <summary>
            执行函数
            </summary>
            <param name="context">函数内容</param>
            <param name="caller">调用作用者，TCP模式下派生自<see cref="T:RRQMSocket.RPC.RRQMRPC.RPCSocketClient"/>,UDP模式下是<see cref="T:System.Net.EndPoint"/></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.GetRegisteredMethodItems(System.String,System.Object)">
            <summary>
            获取注册函数
            </summary>
            <param name="proxyToken"></param>
            <param name="caller">调用作用者，TCP模式下派生自<see cref="T:RRQMSocket.RPC.RRQMRPC.RPCSocketClient"/>,UDP模式下是<see cref="T:System.Net.EndPoint"/></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.TcpParser`1">
            <summary>
            TcpRPCParser泛型类型
            </summary>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpParser`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:RRQMSocket.RPC.RRQMRPC.TcpParser`1.Received">
            <summary>
            收到协议数据
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpParser`1.CallBack``1(System.String,System.Int32,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            回调RPC
            </summary>
            <typeparam name="T">返回值</typeparam>
            <param name="id">ID</param>
            <param name="methodToken">函数唯一标识</param>
            <param name="invokeOption">调用设置</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpParser`1.CallBack(System.String,System.Int32,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            回调RPC
            </summary>
            <param name="id">ID</param>
            <param name="methodToken">函数唯一标识</param>
            <param name="invokeOption">调用设置</param>
            <param name="parameters">参数</param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.TcpRPCParser">
            <summary>
            TCP RPC解释器
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.UdpRPCParser">
            <summary>
            UDP RPC解释器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCParser.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCParser.HandleReceivedData(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            密封处理
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCParser.RRQMInitializeServers(RRQMSocket.RPC.ServerProviderCollection,RRQMSocket.RPC.MethodInstance[])">
            <summary>
            初始化
            </summary>
            <param name="providers"></param>
            <param name="methodInstances"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRPCParser.RRQMEndInvokeMethod(RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            结束调用
            </summary>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.BinarySerializeConverter">
            <summary>
            二进制序列化器,默认最大可序列化1K byte的大小
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.SerializeConverter">
            <summary>
            序列化转换器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.SerializeConverter.SerializeParameter(System.Object)">
            <summary>
            序列化RPC方法返回值参数
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.SerializeConverter.DeserializeParameter(System.Byte[],System.Type)">
            <summary>
            反序列化传输对象
            </summary>
            <param name="parameterBytes"></param>
            <param name="parameterType"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.XmlSerializeConverter">
            <summary>
            Xml序列化
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RPCSocketClient">
            <summary>
            RPC服务器辅助类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RPCSocketClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RPCSocketClient.CallBack``1(System.Int32,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            回调RPC
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodToken"></param>
            <param name="invokeOption"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RPCSocketClient.CallBack(System.Int32,RRQMSocket.RPC.RRQMRPC.InvokeOption,System.Object[])">
            <summary>
            回调RPC
            </summary>
            <param name="methodToken"></param>
            <param name="invokeOption"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RPCSocketClient.CallBack(RRQMSocket.RPC.RRQMRPC.RPCContext,System.Int32)">
            <summary>
            回调RPC
            </summary>
            <param name="invokeContext"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RPCSocketClient.InternalSend(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            内部发送器
            </summary>
            <param name="procotol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RPCSocketClient.HandleProtocolData(System.Nullable{System.Int16},RRQMCore.ByteManager.ByteBlock)">
            <summary>
            处理协议数据
            </summary>
            <param name="procotol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RPCSocketClient.RPCHandleDefaultData(System.Nullable{System.Int16},RRQMCore.ByteManager.ByteBlock)">
            <summary>
            RPC处理其余协议
            </summary>
            <param name="procotol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RPCSocketClient.OnHandleDefaultData(System.Nullable{System.Int16},RRQMCore.ByteManager.ByteBlock)">
            <summary>
            处理其余协议的事件触发
            </summary>
            <param name="procotol"></param>
            <param name="byteBlock"></param>
        </member>
    </members>
</doc>
